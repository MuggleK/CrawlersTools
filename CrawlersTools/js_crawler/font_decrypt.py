# -*- coding: utf-8 -*-
# @Project : CrawlersTools
# @Time    : 2022/8/12 16:11
# @Author  : MuggleK
# @File    : font_decrypt.py

from io import BytesIO

import httpx
from PIL import ImageFont, ImageDraw, Image
from fontTools.ttLib import TTFont
from loguru import logger


class FontDecrypt(object):
    """
    Usage::

        # >>>
        # >>> # 字体base64加密
        # >>> str_base64_ = ' '
        # >>> font = FontDecrypt(str_base64=str_base64_)
        # >>> font.decrypt('𤵼𥙌腐进𤵝防护𥪵𤹩腐蚀𧒄𥉥𥪵𥌙测试𢺔𦰤𤵢𤵩𥤣𥎧𤹩𥤣𥎧')
        # 2022-01-20 17:01:47.932 | SUCCESS  | __main__:decrypt:89 - Out Decrypted Strings：中国腐进与防护学会腐蚀电化学及测试方法专业委员会委员
        # >>>
        # >>> # 字体链接
        # >>> font_url_ = 'https://ss.cods.org.cn/css/woff/791831.woff'
        # >>> font = FontDecrypt(font_url=font_url_)
        # >>> font.decrypt('┗┐┑┕┏┓┐┐┤┘┑┛┣┢┏┨┐┢')
        # 2022-01-20 17:01:48.519 | SUCCESS  | __main__:decrypt:89 - Out Decrypted Strings：92371522mA3dlk1q2k
        # >>>

    """

    def __init__(self, font_url=None, str_base64=None, fontsize=30, host="http://127.0.0.1:9898/"):
        """
        :param font_url: 仅支持woff和ttf格式字体
        :param str_base64: 字体base64
        :param fontsize:
        """
        self.img_mode = 'RGB'
        self.bg_color = (255, 255, 255)
        self.fg_color = (0, 0, 0)
        self.fontsize = fontsize
        self.font_url = font_url
        self.str_base64 = str_base64
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)'
                          ' Chrome/93.0.4577.63 Safari/537.36'
        }
        self.encrypt_str = None
        self.font = None
        self.host = host
        self.font_process()

    def font_base64(self):
        url = 'https://www.motobit.com/util/base64-decoder-encoder.asp?charset=iso-8859-1&acharset='
        data = {
            'tobase64text': self.str_base64,
            'tobase64': 'Convert the source data',
            'tobase64file': '(binary)',
            'maxLineChars': '76',
            'todo': 'decode',
            'output': 'file',
            # 'filename1': '1.ttf'
        }
        r = httpx.post(url=url, headers=self.headers, data=data)
        return r.content

    def font_process(self):
        """
        TODO 修改FreeTypeFont对象源码支持字体bytes类型

        ***
        def load_from_bytes(f):
            if isinstance(f, bytes):    # 直接传入bytes
                self.font_bytes = f
            else:
                self.font_bytes = f.read()
            self.font = core.getfont(
                "", size, index, encoding, self.font_bytes, layout_engine
            )

        if isinstance(font, bytes): # 直接传入bytes
            load_from_bytes(font)
        elif isPath(font):
            ***
        """
        if self.font_url:
            font_content = httpx.get(self.font_url, headers=self.headers).content
        else:
            font_content = self.font_base64()
        self.font = ImageFont.FreeTypeFont(font_content, self.fontsize)
        ttf = TTFont(BytesIO(font_content))
        # 混淆后字体列表
        self.encrypt_str = [chr(string) for string in ttf.getBestCmap().keys()]
        logger.debug(f'Encrypted Words List：{self.encrypt_str}')

    def draw_img(self, letters: str):
        letter_width, letter_height = self.font.getsize(letters)
        img_size = (letter_width + 10, letter_height + 10)
        img_width, img_height = img_size
        img = Image.new(self.img_mode, img_size, self.bg_color)
        draw_brush = ImageDraw.Draw(img)
        text_y = (img_height - letter_height + 1) / 2
        text_y = int(text_y)
        text_x = int((img_width - letter_width + 1) / 2)
        draw_brush.text((text_x, text_y), letters, fill=self.fg_color, font=self.font)
        return img

    def orc(self, word: str):
        import base64
        img = self.draw_img(word)
        img_object = BytesIO()
        img.save(img_object, 'JPEG')
        img_bytes = img_object.getvalue()
        api_url = f"{self.host}/ocr/b64"
        res = httpx.post(api_url, data=base64.b64encode(img_bytes).decode())
        return res.text

    def decrypt(self, word: str):
        logger.debug(f'In Encrypted Strings：{word}')
        string = ''
        for letter in word:
            if letter in self.encrypt_str:
                ocr_str = self.orc(letter)
                if ocr_str:
                    string += self.orc(letter)
                else:
                    string += letter
            else:
                string += letter
        logger.success(f'Out Decrypted Strings：{string}')
        return string
